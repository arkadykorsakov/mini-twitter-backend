// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  email        String @unique
  passwordHash String

  name    String
  surname String

  nickname    String  @unique
  description String?

  createTime DateTime @default(now())
  updateTime DateTime @updatedAt
  isArchive  Boolean  @default(false)

  // avatar
  avatarId Int?
  avatar   File? @relation(fields: [avatarId], references: [id], onDelete: Cascade)

  // подписки
  followers Feed[]    @relation("UserFollowed") // на меня подписаны
  following Feed[]    @relation("UserFollowers") // на кого я подписан
  posts     Post[]
  likes     Like[]
  Comment   Comment[]

  @@map("users")
}

model File {
  id           Int      @id @default(autoincrement())
  uid          String   @unique
  title        String
  storageName  String
  fileName     String
  fileSize     Int
  fileMimeType String
  folder       String
  createTime   DateTime @default(now())

  usersAvatar User[]
  posts       Post[]

  @@map("files")
}

model Feed {
  id         Int @id @default(autoincrement())
  followerId Int
  followedId Int

  createTime DateTime @default(now())

  follower User @relation("UserFollowers", fields: [followerId], references: [id])
  followed User @relation("UserFollowed", fields: [followedId], references: [id])

  @@unique([followedId, followerId])
  @@index([followerId])
  @@index([followedId])
  @@map("feeds")
}

model Post {
  id Int @id @default(autoincrement())

  title String @db.VarChar(255)
  body  String @db.Text

  imageId Int?
  image   File? @relation(fields: [imageId], references: [id], onDelete: Cascade)

  authorId Int
  author   User @relation(fields: [authorId], references: [id])

  createTime DateTime @default(now())
  updateTime DateTime @updatedAt()

  tags     TagPost[]
  likes    Like[]
  comments Comment[]

  @@index([authorId])
  @@map("posts")
}

model Tag {
  id    Int       @id @default(autoincrement())
  title String    @unique @db.VarChar(255)
  posts TagPost[]

  @@map("tags")
}

model Like {
  id         Int      @id @default(autoincrement())
  postId     Int
  userId     Int
  createTime DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
  @@index([userId])
  @@map("likes")
}

model TagPost {
  id     Int  @id @default(autoincrement())
  postId Int
  tagId  Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@index([postId])
  @@index([tagId])
  @@map("tag_posts")
}

model Comment {
  id              Int      @id @default(autoincrement())
  postId          Int
  userId          Int
  parentCommentId Int?
  text            String   @db.Text
  createTime      DateTime @default(now())
  updateTime      DateTime @updatedAt()

  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentComment Comment?  @relation("CommentToParent", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies       Comment[] @relation("CommentToParent")

  @@index([postId])
  @@index([userId])
  @@index([parentCommentId])
  @@map("comments")
}
